{"version":3,"sources":["components/NoMatch/NoMatch.js","components/Post/Post.js","components/Home/Home.js","components/CommentDetail/CommentDetail.js","components/Comment/Comment.js","components/PostDetail/PostDetail.js","App.js","firebase.config.js","serviceWorker.js","index.js"],"names":["NoMatch","className","useStyles","makeStyles","root","maxWidth","margin","padding","Post","props","post","title","body","id","classes","history","useHistory","Card","CardActionArea","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","onClick","postId","url","push","handleClick","Home","useState","posts","setPosts","useEffect","fetch","then","res","json","data","map","key","theme","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","CommentDetail","comment","name","email","CardHeader","Avatar","aria-label","subheader","Comment","setComment","display","flexWrap","spacing","width","PostDetail","useParams","setPost","Paper","paper","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e08caf9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './NoMatch.css'\r\nconst NoMatch = () => {\r\n    return (\r\n        <div className=\"noMatch-container\">\r\n            <h1>404 ! <br/>Page not found</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './Post.css'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      maxWidth: 345,\r\n      margin: \"10px\",\r\n      padding: \"10px\"\r\n    }\r\n  });\r\n\r\nconst Post = (props) => {\r\n    const {title, body, id} = props.post;\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const handleClick = (postId) => {\r\n        const url = `/post/${postId}`;\r\n        history.push(url);\r\n    }\r\n    \r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\" color=\"secondary\">\r\n                            {title}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"primary\" component=\"p\">\r\n                        Body: {body}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => handleClick(id)}>\r\n                    See More   \r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, { useEffect, useState } from 'react';\r\nimport Post from '../Post/Post';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const url = 'http://jsonplaceholder.typicode.com/posts';\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => setPosts(data))\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {\r\n                posts.map(post => <Post post={post} key={post.id}></Post>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      maxWidth: 345,\r\n    },\r\n    media: {\r\n      height: 0,\r\n      paddingTop: '56.25%',\r\n    },\r\n    expand: {\r\n      transform: 'rotate(0deg)',\r\n      marginLeft: 'auto',\r\n      transition: theme.transitions.create('transform', {\r\n        duration: theme.transitions.duration.shortest,\r\n      }),\r\n    },\r\n    expandOpen: {\r\n      transform: 'rotate(180deg)',\r\n    },\r\n    avatar: {\r\n      backgroundColor: red[500],\r\n    },\r\n  }));\r\nconst CommentDetail = (props) => {\r\n    const {name, email, body} = props.comment;\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n      <Card className={classes.root}>\r\n        <CardHeader\r\n          avatar={\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n              \r\n            </Avatar>\r\n          }\r\n          title={name}\r\n          subheader={email}\r\n        />\r\n        <CardContent>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {body}\r\n          </Typography>\r\n        </CardContent>\r\n    </Card>\r\n    );\r\n};\r\n\r\nexport default CommentDetail;","import React, { useEffect, useState } from 'react';\r\nimport CommentDetail from '../CommentDetail/CommentDetail';\r\n\r\nconst Comment = (props) => {\r\n    const {postId} = props;\r\n    const [comment, setComment] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const url = `https://jsonplaceholder.typicode.com/comments?postId=${postId}`;\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => setComment(data))\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <h2>Comment |</h2>\r\n            {\r\n                comment.map(comment => <CommentDetail comment={comment} key={comment.id}></CommentDetail>)\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;","import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './PostDetail.css';\r\nimport Comment from '../Comment/Comment';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: theme.spacing(200),\r\n        height: theme.spacing(16),\r\n      },\r\n    },\r\n  }));\r\n\r\nconst PostDetail = () => {\r\n    const {postId} = useParams();\r\n    const [post, setPost] = useState([]);\r\n    const {title, body} = post;\r\n\r\n    useEffect(() => {\r\n        const url = `https://jsonplaceholder.typicode.com/posts/${postId}`;\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(data => setPost(data))\r\n    }, []);\r\n    \r\n    const classes = useStyles();\r\n\r\n    return (    \r\n        <Paper className={classes.paper}>\r\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                \r\n            </Avatar>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\" color=\"secondary\">\r\n                Name: {title}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"primary\" component=\"p\">\r\n                Post: {body}\r\n            </Typography>\r\n            <Comment postId={postId}></Comment>\r\n        </Paper> \r\n    );\r\n};\r\n\r\nexport default PostDetail;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport NoMatch from './components/NoMatch/NoMatch';\nimport Home from './components/Home/Home';\nimport PostDetail from './components/PostDetail/PostDetail';\nimport * as firebase from \"firebase/app\";\nimport { firebaseConfig } from './firebase.config';\nfirebase.initializeApp(firebaseConfig);\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/home\">\n          <Home />\n        </Route>\n        <Route path=\"/post/:postId\">\n          <PostDetail />\n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"*\">\n          <NoMatch />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","export const firebaseConfig = {\r\n    apiKey: \"AIzaSyBdgi4cB3d3zaS1tRuJ8b2SvKm4zE-O8uM\",\r\n    authDomain: \"assignment-8-social-buddy.firebaseapp.com\",\r\n    databaseURL: \"https://assignment-8-social-buddy.firebaseio.com\",\r\n    projectId: \"assignment-8-social-buddy\",\r\n    storageBucket: \"assignment-8-social-buddy.appspot.com\",\r\n    messagingSenderId: \"347180038253\",\r\n    appId: \"1:347180038253:web:2ffdc953f5ddd5a406a764\"\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}